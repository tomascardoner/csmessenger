//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSMessenger
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Entity.Core.EntityClient;
    
    public partial class CSMessengerContext : DbContext
    {
    	public static string connectionString { get; set; }
    
        public static void CreateConnectionString(string provider, string providerConnectionString)
        {
            EntityConnectionStringBuilder ecb = new EntityConnectionStringBuilder();
    
            ecb.Metadata = string.Format("res://*/{0}.csdl|res://*/{0}.ssdl|res://*/{0}.msl", "CSMessenger");
            ecb.Provider = provider;
            ecb.ProviderConnectionString = providerConnectionString;
    
            connectionString = ecb.ConnectionString;
        }
    
        public CSMessengerContext()
            : base(connectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<UserFavorite> UserFavorite { get; set; }
        public virtual DbSet<UserCompany> UserCompany { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserNotification> UserNotification { get; set; }
    
        public virtual ObjectResult<usp_Message_ListByUserAndDate_Result> usp_Message_ListByUserAndDate(Nullable<byte> sourceCompanyID, Nullable<short> sourceUserID, Nullable<byte> destinationCompanyID, Nullable<short> destinationUserID, Nullable<System.DateTime> date)
        {
            var sourceCompanyIDParameter = sourceCompanyID.HasValue ?
                new ObjectParameter("SourceCompanyID", sourceCompanyID) :
                new ObjectParameter("SourceCompanyID", typeof(byte));
    
            var sourceUserIDParameter = sourceUserID.HasValue ?
                new ObjectParameter("SourceUserID", sourceUserID) :
                new ObjectParameter("SourceUserID", typeof(short));
    
            var destinationCompanyIDParameter = destinationCompanyID.HasValue ?
                new ObjectParameter("DestinationCompanyID", destinationCompanyID) :
                new ObjectParameter("DestinationCompanyID", typeof(byte));
    
            var destinationUserIDParameter = destinationUserID.HasValue ?
                new ObjectParameter("DestinationUserID", destinationUserID) :
                new ObjectParameter("DestinationUserID", typeof(short));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Message_ListByUserAndDate_Result>("usp_Message_ListByUserAndDate", sourceCompanyIDParameter, sourceUserIDParameter, destinationCompanyIDParameter, destinationUserIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<usp_User_ListFavorites_Result> usp_User_ListFavorites(Nullable<byte> companyID, Nullable<short> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(byte));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_ListFavorites_Result>("usp_User_ListFavorites", companyIDParameter, userIDParameter);
        }
    
        public virtual int usp_Message_Send(Nullable<byte> sourceCompanyID, Nullable<short> sourceUserID, Nullable<byte> destinationCompanyID, Nullable<short> destinationUserID, string text, ObjectParameter messageID)
        {
            var sourceCompanyIDParameter = sourceCompanyID.HasValue ?
                new ObjectParameter("SourceCompanyID", sourceCompanyID) :
                new ObjectParameter("SourceCompanyID", typeof(byte));
    
            var sourceUserIDParameter = sourceUserID.HasValue ?
                new ObjectParameter("SourceUserID", sourceUserID) :
                new ObjectParameter("SourceUserID", typeof(short));
    
            var destinationCompanyIDParameter = destinationCompanyID.HasValue ?
                new ObjectParameter("DestinationCompanyID", destinationCompanyID) :
                new ObjectParameter("DestinationCompanyID", typeof(byte));
    
            var destinationUserIDParameter = destinationUserID.HasValue ?
                new ObjectParameter("DestinationUserID", destinationUserID) :
                new ObjectParameter("DestinationUserID", typeof(short));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Message_Send", sourceCompanyIDParameter, sourceUserIDParameter, destinationCompanyIDParameter, destinationUserIDParameter, textParameter, messageID);
        }
    
        public virtual ObjectResult<usp_User_ListByLastMessage_Result> usp_User_ListByLastMessage(Nullable<byte> companyID, Nullable<short> userID, Nullable<short> maxDays)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(byte));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var maxDaysParameter = maxDays.HasValue ?
                new ObjectParameter("MaxDays", maxDays) :
                new ObjectParameter("MaxDays", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_ListByLastMessage_Result>("usp_User_ListByLastMessage", companyIDParameter, userIDParameter, maxDaysParameter);
        }
    
        public virtual ObjectResult<string> usp_User_GetInfoFromCompanyDB(Nullable<byte> companyID, Nullable<short> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(byte));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_User_GetInfoFromCompanyDB", companyIDParameter, userIDParameter);
        }
    }
}
